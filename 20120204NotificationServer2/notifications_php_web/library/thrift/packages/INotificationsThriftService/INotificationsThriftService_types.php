<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Info {
  static $_TSPEC;

  public $id = null;
  public $appId = null;
  public $senderId = null;
  public $receiverId = null;
  public $type = null;
  public $uri = null;
  public $title = null;
  public $data = null;
  public $processMethod = null;
  public $processed = null;
  public $read = null;
  public $importance = null;
  public $body = null;
  public $bodyHtml = null;
  public $titleHtml = null;
  public $objectId = null;
  public $date = null;
  public $lastModified = null;
  public $guid = null;
  public $action = null;
  public $push = null;
  public $scene = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'senderId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'receiverId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'uri',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'processMethod',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'processed',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'read',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'importance',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'bodyHtml',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'titleHtml',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'objectId',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'date',
          'type' => TType::I64,
          ),
        18 => array(
          'var' => 'lastModified',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'push',
          'type' => TType::BOOL,
          ),
        22 => array(
          'var' => 'scene',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['senderId'])) {
        $this->senderId = $vals['senderId'];
      }
      if (isset($vals['receiverId'])) {
        $this->receiverId = $vals['receiverId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['uri'])) {
        $this->uri = $vals['uri'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['processMethod'])) {
        $this->processMethod = $vals['processMethod'];
      }
      if (isset($vals['processed'])) {
        $this->processed = $vals['processed'];
      }
      if (isset($vals['read'])) {
        $this->read = $vals['read'];
      }
      if (isset($vals['importance'])) {
        $this->importance = $vals['importance'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
      if (isset($vals['bodyHtml'])) {
        $this->bodyHtml = $vals['bodyHtml'];
      }
      if (isset($vals['titleHtml'])) {
        $this->titleHtml = $vals['titleHtml'];
      }
      if (isset($vals['objectId'])) {
        $this->objectId = $vals['objectId'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['lastModified'])) {
        $this->lastModified = $vals['lastModified'];
      }
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['push'])) {
        $this->push = $vals['push'];
      }
      if (isset($vals['scene'])) {
        $this->scene = $vals['scene'];
      }
    }
  }

  public function getName() {
    return 'Info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->senderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiverId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->processMethod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->processed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->read);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->importance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bodyHtml);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->titleHtml);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastModified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->push);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scene);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Info');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 2);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderId !== null) {
      $xfer += $output->writeFieldBegin('senderId', TType::STRING, 3);
      $xfer += $output->writeString($this->senderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiverId !== null) {
      $xfer += $output->writeFieldBegin('receiverId', TType::STRING, 4);
      $xfer += $output->writeString($this->receiverId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 5);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uri !== null) {
      $xfer += $output->writeFieldBegin('uri', TType::STRING, 6);
      $xfer += $output->writeString($this->uri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 7);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 8);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processMethod !== null) {
      $xfer += $output->writeFieldBegin('processMethod', TType::I32, 9);
      $xfer += $output->writeI32($this->processMethod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processed !== null) {
      $xfer += $output->writeFieldBegin('processed', TType::BOOL, 10);
      $xfer += $output->writeBool($this->processed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->read !== null) {
      $xfer += $output->writeFieldBegin('read', TType::BOOL, 11);
      $xfer += $output->writeBool($this->read);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importance !== null) {
      $xfer += $output->writeFieldBegin('importance', TType::I32, 12);
      $xfer += $output->writeI32($this->importance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 13);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bodyHtml !== null) {
      $xfer += $output->writeFieldBegin('bodyHtml', TType::STRING, 14);
      $xfer += $output->writeString($this->bodyHtml);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titleHtml !== null) {
      $xfer += $output->writeFieldBegin('titleHtml', TType::STRING, 15);
      $xfer += $output->writeString($this->titleHtml);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectId !== null) {
      $xfer += $output->writeFieldBegin('objectId', TType::STRING, 16);
      $xfer += $output->writeString($this->objectId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::I64, 17);
      $xfer += $output->writeI64($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastModified !== null) {
      $xfer += $output->writeFieldBegin('lastModified', TType::I64, 18);
      $xfer += $output->writeI64($this->lastModified);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 19);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 20);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->push !== null) {
      $xfer += $output->writeFieldBegin('push', TType::BOOL, 21);
      $xfer += $output->writeBool($this->push);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scene !== null) {
      $xfer += $output->writeFieldBegin('scene', TType::STRING, 22);
      $xfer += $output->writeString($this->scene);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StateResult {
  static $_TSPEC;

  public $mid = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'StateResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StateResult');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 2);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotificationUnreadResult {
  static $_TSPEC;

  public $scene = null;
  public $readcount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scene',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'readcount',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['scene'])) {
        $this->scene = $vals['scene'];
      }
      if (isset($vals['readcount'])) {
        $this->readcount = $vals['readcount'];
      }
    }
  }

  public function getName() {
    return 'NotificationUnreadResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scene);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->readcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotificationUnreadResult');
    if ($this->scene !== null) {
      $xfer += $output->writeFieldBegin('scene', TType::STRING, 1);
      $xfer += $output->writeString($this->scene);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->readcount !== null) {
      $xfer += $output->writeFieldBegin('readcount', TType::STRING, 2);
      $xfer += $output->writeString($this->readcount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
