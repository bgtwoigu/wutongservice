/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.borqs.notifications.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Info implements org.apache.thrift.TBase<Info, Info._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Info");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECEIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROCESS_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("processMethod", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PROCESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("processed", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IMPORTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("importance", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BODY_HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("bodyHtml", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TITLE_HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("titleHtml", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModified", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("push", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField("scene", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)23);

  private long id; // required
  private String appId; // required
  private String senderId; // required
  private String receiverId; // required
  private String type; // required
  private String uri; // required
  private String title; // required
  private String data; // required
  private int processMethod; // required
  private boolean processed; // required
  private boolean read; // required
  private int importance; // required
  private String body; // required
  private String bodyHtml; // required
  private String titleHtml; // required
  private String objectId; // required
  private long date; // required
  private long lastModified; // required
  private String guid; // required
  private String action; // required
  private boolean push; // required
  private String scene; // required
  private String imageUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APP_ID((short)2, "appId"),
    SENDER_ID((short)3, "senderId"),
    RECEIVER_ID((short)4, "receiverId"),
    TYPE((short)5, "type"),
    URI((short)6, "uri"),
    TITLE((short)7, "title"),
    DATA((short)8, "data"),
    PROCESS_METHOD((short)9, "processMethod"),
    PROCESSED((short)10, "processed"),
    READ((short)11, "read"),
    IMPORTANCE((short)12, "importance"),
    BODY((short)13, "body"),
    BODY_HTML((short)14, "bodyHtml"),
    TITLE_HTML((short)15, "titleHtml"),
    OBJECT_ID((short)16, "objectId"),
    DATE((short)17, "date"),
    LAST_MODIFIED((short)18, "lastModified"),
    GUID((short)19, "guid"),
    ACTION((short)20, "action"),
    PUSH((short)21, "push"),
    SCENE((short)22, "scene"),
    IMAGE_URL((short)23, "imageUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // SENDER_ID
          return SENDER_ID;
        case 4: // RECEIVER_ID
          return RECEIVER_ID;
        case 5: // TYPE
          return TYPE;
        case 6: // URI
          return URI;
        case 7: // TITLE
          return TITLE;
        case 8: // DATA
          return DATA;
        case 9: // PROCESS_METHOD
          return PROCESS_METHOD;
        case 10: // PROCESSED
          return PROCESSED;
        case 11: // READ
          return READ;
        case 12: // IMPORTANCE
          return IMPORTANCE;
        case 13: // BODY
          return BODY;
        case 14: // BODY_HTML
          return BODY_HTML;
        case 15: // TITLE_HTML
          return TITLE_HTML;
        case 16: // OBJECT_ID
          return OBJECT_ID;
        case 17: // DATE
          return DATE;
        case 18: // LAST_MODIFIED
          return LAST_MODIFIED;
        case 19: // GUID
          return GUID;
        case 20: // ACTION
          return ACTION;
        case 21: // PUSH
          return PUSH;
        case 22: // SCENE
          return SCENE;
        case 23: // IMAGE_URL
          return IMAGE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROCESSMETHOD_ISSET_ID = 1;
  private static final int __PROCESSED_ISSET_ID = 2;
  private static final int __READ_ISSET_ID = 3;
  private static final int __IMPORTANCE_ISSET_ID = 4;
  private static final int __DATE_ISSET_ID = 5;
  private static final int __LASTMODIFIED_ISSET_ID = 6;
  private static final int __PUSH_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("senderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("receiverId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_METHOD, new org.apache.thrift.meta_data.FieldMetaData("processMethod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESSED, new org.apache.thrift.meta_data.FieldMetaData("processed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IMPORTANCE, new org.apache.thrift.meta_data.FieldMetaData("importance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY_HTML, new org.apache.thrift.meta_data.FieldMetaData("bodyHtml", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE_HTML, new org.apache.thrift.meta_data.FieldMetaData("titleHtml", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("lastModified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUSH, new org.apache.thrift.meta_data.FieldMetaData("push", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCENE, new org.apache.thrift.meta_data.FieldMetaData("scene", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Info.class, metaDataMap);
  }

  public Info() {
  }

  public Info(
    String appId,
    String senderId,
    String receiverId,
    String type)
  {
    this();
    this.appId = appId;
    this.senderId = senderId;
    this.receiverId = receiverId;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Info(Info other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetSenderId()) {
      this.senderId = other.senderId;
    }
    if (other.isSetReceiverId()) {
      this.receiverId = other.receiverId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetData()) {
      this.data = other.data;
    }
    this.processMethod = other.processMethod;
    this.processed = other.processed;
    this.read = other.read;
    this.importance = other.importance;
    if (other.isSetBody()) {
      this.body = other.body;
    }
    if (other.isSetBodyHtml()) {
      this.bodyHtml = other.bodyHtml;
    }
    if (other.isSetTitleHtml()) {
      this.titleHtml = other.titleHtml;
    }
    if (other.isSetObjectId()) {
      this.objectId = other.objectId;
    }
    this.date = other.date;
    this.lastModified = other.lastModified;
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    this.push = other.push;
    if (other.isSetScene()) {
      this.scene = other.scene;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
  }

  public Info deepCopy() {
    return new Info(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.appId = null;
    this.senderId = null;
    this.receiverId = null;
    this.type = null;
    this.uri = null;
    this.title = null;
    this.data = null;
    setProcessMethodIsSet(false);
    this.processMethod = 0;
    setProcessedIsSet(false);
    this.processed = false;
    setReadIsSet(false);
    this.read = false;
    setImportanceIsSet(false);
    this.importance = 0;
    this.body = null;
    this.bodyHtml = null;
    this.titleHtml = null;
    this.objectId = null;
    setDateIsSet(false);
    this.date = 0;
    setLastModifiedIsSet(false);
    this.lastModified = 0;
    this.guid = null;
    this.action = null;
    setPushIsSet(false);
    this.push = false;
    this.scene = null;
    this.imageUrl = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getAppId() {
    return this.appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public String getSenderId() {
    return this.senderId;
  }

  public void setSenderId(String senderId) {
    this.senderId = senderId;
  }

  public void unsetSenderId() {
    this.senderId = null;
  }

  /** Returns true if field senderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderId() {
    return this.senderId != null;
  }

  public void setSenderIdIsSet(boolean value) {
    if (!value) {
      this.senderId = null;
    }
  }

  public String getReceiverId() {
    return this.receiverId;
  }

  public void setReceiverId(String receiverId) {
    this.receiverId = receiverId;
  }

  public void unsetReceiverId() {
    this.receiverId = null;
  }

  /** Returns true if field receiverId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverId() {
    return this.receiverId != null;
  }

  public void setReceiverIdIsSet(boolean value) {
    if (!value) {
      this.receiverId = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getUri() {
    return this.uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getData() {
    return this.data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getProcessMethod() {
    return this.processMethod;
  }

  public void setProcessMethod(int processMethod) {
    this.processMethod = processMethod;
    setProcessMethodIsSet(true);
  }

  public void unsetProcessMethod() {
    __isset_bit_vector.clear(__PROCESSMETHOD_ISSET_ID);
  }

  /** Returns true if field processMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessMethod() {
    return __isset_bit_vector.get(__PROCESSMETHOD_ISSET_ID);
  }

  public void setProcessMethodIsSet(boolean value) {
    __isset_bit_vector.set(__PROCESSMETHOD_ISSET_ID, value);
  }

  public boolean isProcessed() {
    return this.processed;
  }

  public void setProcessed(boolean processed) {
    this.processed = processed;
    setProcessedIsSet(true);
  }

  public void unsetProcessed() {
    __isset_bit_vector.clear(__PROCESSED_ISSET_ID);
  }

  /** Returns true if field processed is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessed() {
    return __isset_bit_vector.get(__PROCESSED_ISSET_ID);
  }

  public void setProcessedIsSet(boolean value) {
    __isset_bit_vector.set(__PROCESSED_ISSET_ID, value);
  }

  public boolean isRead() {
    return this.read;
  }

  public void setRead(boolean read) {
    this.read = read;
    setReadIsSet(true);
  }

  public void unsetRead() {
    __isset_bit_vector.clear(__READ_ISSET_ID);
  }

  /** Returns true if field read is set (has been assigned a value) and false otherwise */
  public boolean isSetRead() {
    return __isset_bit_vector.get(__READ_ISSET_ID);
  }

  public void setReadIsSet(boolean value) {
    __isset_bit_vector.set(__READ_ISSET_ID, value);
  }

  public int getImportance() {
    return this.importance;
  }

  public void setImportance(int importance) {
    this.importance = importance;
    setImportanceIsSet(true);
  }

  public void unsetImportance() {
    __isset_bit_vector.clear(__IMPORTANCE_ISSET_ID);
  }

  /** Returns true if field importance is set (has been assigned a value) and false otherwise */
  public boolean isSetImportance() {
    return __isset_bit_vector.get(__IMPORTANCE_ISSET_ID);
  }

  public void setImportanceIsSet(boolean value) {
    __isset_bit_vector.set(__IMPORTANCE_ISSET_ID, value);
  }

  public String getBody() {
    return this.body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public String getBodyHtml() {
    return this.bodyHtml;
  }

  public void setBodyHtml(String bodyHtml) {
    this.bodyHtml = bodyHtml;
  }

  public void unsetBodyHtml() {
    this.bodyHtml = null;
  }

  /** Returns true if field bodyHtml is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyHtml() {
    return this.bodyHtml != null;
  }

  public void setBodyHtmlIsSet(boolean value) {
    if (!value) {
      this.bodyHtml = null;
    }
  }

  public String getTitleHtml() {
    return this.titleHtml;
  }

  public void setTitleHtml(String titleHtml) {
    this.titleHtml = titleHtml;
  }

  public void unsetTitleHtml() {
    this.titleHtml = null;
  }

  /** Returns true if field titleHtml is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleHtml() {
    return this.titleHtml != null;
  }

  public void setTitleHtmlIsSet(boolean value) {
    if (!value) {
      this.titleHtml = null;
    }
  }

  public String getObjectId() {
    return this.objectId;
  }

  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }

  public void unsetObjectId() {
    this.objectId = null;
  }

  /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectId() {
    return this.objectId != null;
  }

  public void setObjectIdIsSet(boolean value) {
    if (!value) {
      this.objectId = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public void setDate(long date) {
    this.date = date;
    setDateIsSet(true);
  }

  public void unsetDate() {
    __isset_bit_vector.clear(__DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return __isset_bit_vector.get(__DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bit_vector.set(__DATE_ISSET_ID, value);
  }

  public long getLastModified() {
    return this.lastModified;
  }

  public void setLastModified(long lastModified) {
    this.lastModified = lastModified;
    setLastModifiedIsSet(true);
  }

  public void unsetLastModified() {
    __isset_bit_vector.clear(__LASTMODIFIED_ISSET_ID);
  }

  /** Returns true if field lastModified is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModified() {
    return __isset_bit_vector.get(__LASTMODIFIED_ISSET_ID);
  }

  public void setLastModifiedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTMODIFIED_ISSET_ID, value);
  }

  public String getGuid() {
    return this.guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public void setAction(String action) {
    this.action = action;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public boolean isPush() {
    return this.push;
  }

  public void setPush(boolean push) {
    this.push = push;
    setPushIsSet(true);
  }

  public void unsetPush() {
    __isset_bit_vector.clear(__PUSH_ISSET_ID);
  }

  /** Returns true if field push is set (has been assigned a value) and false otherwise */
  public boolean isSetPush() {
    return __isset_bit_vector.get(__PUSH_ISSET_ID);
  }

  public void setPushIsSet(boolean value) {
    __isset_bit_vector.set(__PUSH_ISSET_ID, value);
  }

  public String getScene() {
    return this.scene;
  }

  public void setScene(String scene) {
    this.scene = scene;
  }

  public void unsetScene() {
    this.scene = null;
  }

  /** Returns true if field scene is set (has been assigned a value) and false otherwise */
  public boolean isSetScene() {
    return this.scene != null;
  }

  public void setSceneIsSet(boolean value) {
    if (!value) {
      this.scene = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case SENDER_ID:
      if (value == null) {
        unsetSenderId();
      } else {
        setSenderId((String)value);
      }
      break;

    case RECEIVER_ID:
      if (value == null) {
        unsetReceiverId();
      } else {
        setReceiverId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((String)value);
      }
      break;

    case PROCESS_METHOD:
      if (value == null) {
        unsetProcessMethod();
      } else {
        setProcessMethod((Integer)value);
      }
      break;

    case PROCESSED:
      if (value == null) {
        unsetProcessed();
      } else {
        setProcessed((Boolean)value);
      }
      break;

    case READ:
      if (value == null) {
        unsetRead();
      } else {
        setRead((Boolean)value);
      }
      break;

    case IMPORTANCE:
      if (value == null) {
        unsetImportance();
      } else {
        setImportance((Integer)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case BODY_HTML:
      if (value == null) {
        unsetBodyHtml();
      } else {
        setBodyHtml((String)value);
      }
      break;

    case TITLE_HTML:
      if (value == null) {
        unsetTitleHtml();
      } else {
        setTitleHtml((String)value);
      }
      break;

    case OBJECT_ID:
      if (value == null) {
        unsetObjectId();
      } else {
        setObjectId((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case LAST_MODIFIED:
      if (value == null) {
        unsetLastModified();
      } else {
        setLastModified((Long)value);
      }
      break;

    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case PUSH:
      if (value == null) {
        unsetPush();
      } else {
        setPush((Boolean)value);
      }
      break;

    case SCENE:
      if (value == null) {
        unsetScene();
      } else {
        setScene((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case APP_ID:
      return getAppId();

    case SENDER_ID:
      return getSenderId();

    case RECEIVER_ID:
      return getReceiverId();

    case TYPE:
      return getType();

    case URI:
      return getUri();

    case TITLE:
      return getTitle();

    case DATA:
      return getData();

    case PROCESS_METHOD:
      return Integer.valueOf(getProcessMethod());

    case PROCESSED:
      return Boolean.valueOf(isProcessed());

    case READ:
      return Boolean.valueOf(isRead());

    case IMPORTANCE:
      return Integer.valueOf(getImportance());

    case BODY:
      return getBody();

    case BODY_HTML:
      return getBodyHtml();

    case TITLE_HTML:
      return getTitleHtml();

    case OBJECT_ID:
      return getObjectId();

    case DATE:
      return Long.valueOf(getDate());

    case LAST_MODIFIED:
      return Long.valueOf(getLastModified());

    case GUID:
      return getGuid();

    case ACTION:
      return getAction();

    case PUSH:
      return Boolean.valueOf(isPush());

    case SCENE:
      return getScene();

    case IMAGE_URL:
      return getImageUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APP_ID:
      return isSetAppId();
    case SENDER_ID:
      return isSetSenderId();
    case RECEIVER_ID:
      return isSetReceiverId();
    case TYPE:
      return isSetType();
    case URI:
      return isSetUri();
    case TITLE:
      return isSetTitle();
    case DATA:
      return isSetData();
    case PROCESS_METHOD:
      return isSetProcessMethod();
    case PROCESSED:
      return isSetProcessed();
    case READ:
      return isSetRead();
    case IMPORTANCE:
      return isSetImportance();
    case BODY:
      return isSetBody();
    case BODY_HTML:
      return isSetBodyHtml();
    case TITLE_HTML:
      return isSetTitleHtml();
    case OBJECT_ID:
      return isSetObjectId();
    case DATE:
      return isSetDate();
    case LAST_MODIFIED:
      return isSetLastModified();
    case GUID:
      return isSetGuid();
    case ACTION:
      return isSetAction();
    case PUSH:
      return isSetPush();
    case SCENE:
      return isSetScene();
    case IMAGE_URL:
      return isSetImageUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Info)
      return this.equals((Info)that);
    return false;
  }

  public boolean equals(Info that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_senderId = true && this.isSetSenderId();
    boolean that_present_senderId = true && that.isSetSenderId();
    if (this_present_senderId || that_present_senderId) {
      if (!(this_present_senderId && that_present_senderId))
        return false;
      if (!this.senderId.equals(that.senderId))
        return false;
    }

    boolean this_present_receiverId = true && this.isSetReceiverId();
    boolean that_present_receiverId = true && that.isSetReceiverId();
    if (this_present_receiverId || that_present_receiverId) {
      if (!(this_present_receiverId && that_present_receiverId))
        return false;
      if (!this.receiverId.equals(that.receiverId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_processMethod = true && this.isSetProcessMethod();
    boolean that_present_processMethod = true && that.isSetProcessMethod();
    if (this_present_processMethod || that_present_processMethod) {
      if (!(this_present_processMethod && that_present_processMethod))
        return false;
      if (this.processMethod != that.processMethod)
        return false;
    }

    boolean this_present_processed = true && this.isSetProcessed();
    boolean that_present_processed = true && that.isSetProcessed();
    if (this_present_processed || that_present_processed) {
      if (!(this_present_processed && that_present_processed))
        return false;
      if (this.processed != that.processed)
        return false;
    }

    boolean this_present_read = true && this.isSetRead();
    boolean that_present_read = true && that.isSetRead();
    if (this_present_read || that_present_read) {
      if (!(this_present_read && that_present_read))
        return false;
      if (this.read != that.read)
        return false;
    }

    boolean this_present_importance = true && this.isSetImportance();
    boolean that_present_importance = true && that.isSetImportance();
    if (this_present_importance || that_present_importance) {
      if (!(this_present_importance && that_present_importance))
        return false;
      if (this.importance != that.importance)
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_bodyHtml = true && this.isSetBodyHtml();
    boolean that_present_bodyHtml = true && that.isSetBodyHtml();
    if (this_present_bodyHtml || that_present_bodyHtml) {
      if (!(this_present_bodyHtml && that_present_bodyHtml))
        return false;
      if (!this.bodyHtml.equals(that.bodyHtml))
        return false;
    }

    boolean this_present_titleHtml = true && this.isSetTitleHtml();
    boolean that_present_titleHtml = true && that.isSetTitleHtml();
    if (this_present_titleHtml || that_present_titleHtml) {
      if (!(this_present_titleHtml && that_present_titleHtml))
        return false;
      if (!this.titleHtml.equals(that.titleHtml))
        return false;
    }

    boolean this_present_objectId = true && this.isSetObjectId();
    boolean that_present_objectId = true && that.isSetObjectId();
    if (this_present_objectId || that_present_objectId) {
      if (!(this_present_objectId && that_present_objectId))
        return false;
      if (!this.objectId.equals(that.objectId))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_lastModified = true && this.isSetLastModified();
    boolean that_present_lastModified = true && that.isSetLastModified();
    if (this_present_lastModified || that_present_lastModified) {
      if (!(this_present_lastModified && that_present_lastModified))
        return false;
      if (this.lastModified != that.lastModified)
        return false;
    }

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_push = true && this.isSetPush();
    boolean that_present_push = true && that.isSetPush();
    if (this_present_push || that_present_push) {
      if (!(this_present_push && that_present_push))
        return false;
      if (this.push != that.push)
        return false;
    }

    boolean this_present_scene = true && this.isSetScene();
    boolean that_present_scene = true && that.isSetScene();
    if (this_present_scene || that_present_scene) {
      if (!(this_present_scene && that_present_scene))
        return false;
      if (!this.scene.equals(that.scene))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Info other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Info typedOther = (Info)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderId()).compareTo(typedOther.isSetSenderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderId, typedOther.senderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiverId()).compareTo(typedOther.isSetReceiverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverId, typedOther.receiverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUri()).compareTo(typedOther.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, typedOther.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessMethod()).compareTo(typedOther.isSetProcessMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processMethod, typedOther.processMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessed()).compareTo(typedOther.isSetProcessed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processed, typedOther.processed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead()).compareTo(typedOther.isSetRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, typedOther.read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImportance()).compareTo(typedOther.isSetImportance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importance, typedOther.importance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(typedOther.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, typedOther.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyHtml()).compareTo(typedOther.isSetBodyHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyHtml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodyHtml, typedOther.bodyHtml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleHtml()).compareTo(typedOther.isSetTitleHtml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleHtml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleHtml, typedOther.titleHtml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectId()).compareTo(typedOther.isSetObjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, typedOther.objectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModified()).compareTo(typedOther.isSetLastModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModified, typedOther.lastModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, typedOther.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, typedOther.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPush()).compareTo(typedOther.isSetPush());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPush()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push, typedOther.push);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScene()).compareTo(typedOther.isSetScene());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScene()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scene, typedOther.scene);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(typedOther.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, typedOther.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // APP_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.appId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SENDER_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.senderId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RECEIVER_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.receiverId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.type = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // URI
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.uri = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.title = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // DATA
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.data = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // PROCESS_METHOD
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.processMethod = iprot.readI32();
            setProcessMethodIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PROCESSED
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.processed = iprot.readBool();
            setProcessedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // READ
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.read = iprot.readBool();
            setReadIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // IMPORTANCE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.importance = iprot.readI32();
            setImportanceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // BODY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.body = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // BODY_HTML
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.bodyHtml = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // TITLE_HTML
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.titleHtml = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // OBJECT_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.objectId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // DATE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.date = iprot.readI64();
            setDateIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // LAST_MODIFIED
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.lastModified = iprot.readI64();
            setLastModifiedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // GUID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.guid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // ACTION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.action = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // PUSH
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.push = iprot.readBool();
            setPushIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // SCENE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.scene = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // IMAGE_URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.imageUrl = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetId()) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(this.id);
      oprot.writeFieldEnd();
    }
    if (this.appId != null) {
      oprot.writeFieldBegin(APP_ID_FIELD_DESC);
      oprot.writeString(this.appId);
      oprot.writeFieldEnd();
    }
    if (this.senderId != null) {
      oprot.writeFieldBegin(SENDER_ID_FIELD_DESC);
      oprot.writeString(this.senderId);
      oprot.writeFieldEnd();
    }
    if (this.receiverId != null) {
      oprot.writeFieldBegin(RECEIVER_ID_FIELD_DESC);
      oprot.writeString(this.receiverId);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.uri != null) {
      if (isSetUri()) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(this.uri);
        oprot.writeFieldEnd();
      }
    }
    if (this.title != null) {
      if (isSetTitle()) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(this.title);
        oprot.writeFieldEnd();
      }
    }
    if (this.data != null) {
      if (isSetData()) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeString(this.data);
        oprot.writeFieldEnd();
      }
    }
    if (isSetProcessMethod()) {
      oprot.writeFieldBegin(PROCESS_METHOD_FIELD_DESC);
      oprot.writeI32(this.processMethod);
      oprot.writeFieldEnd();
    }
    if (isSetProcessed()) {
      oprot.writeFieldBegin(PROCESSED_FIELD_DESC);
      oprot.writeBool(this.processed);
      oprot.writeFieldEnd();
    }
    if (isSetRead()) {
      oprot.writeFieldBegin(READ_FIELD_DESC);
      oprot.writeBool(this.read);
      oprot.writeFieldEnd();
    }
    if (isSetImportance()) {
      oprot.writeFieldBegin(IMPORTANCE_FIELD_DESC);
      oprot.writeI32(this.importance);
      oprot.writeFieldEnd();
    }
    if (this.body != null) {
      if (isSetBody()) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(this.body);
        oprot.writeFieldEnd();
      }
    }
    if (this.bodyHtml != null) {
      if (isSetBodyHtml()) {
        oprot.writeFieldBegin(BODY_HTML_FIELD_DESC);
        oprot.writeString(this.bodyHtml);
        oprot.writeFieldEnd();
      }
    }
    if (this.titleHtml != null) {
      if (isSetTitleHtml()) {
        oprot.writeFieldBegin(TITLE_HTML_FIELD_DESC);
        oprot.writeString(this.titleHtml);
        oprot.writeFieldEnd();
      }
    }
    if (this.objectId != null) {
      if (isSetObjectId()) {
        oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
        oprot.writeString(this.objectId);
        oprot.writeFieldEnd();
      }
    }
    if (isSetDate()) {
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(this.date);
      oprot.writeFieldEnd();
    }
    if (isSetLastModified()) {
      oprot.writeFieldBegin(LAST_MODIFIED_FIELD_DESC);
      oprot.writeI64(this.lastModified);
      oprot.writeFieldEnd();
    }
    if (this.guid != null) {
      if (isSetGuid()) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
    }
    if (this.action != null) {
      if (isSetAction()) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeString(this.action);
        oprot.writeFieldEnd();
      }
    }
    if (isSetPush()) {
      oprot.writeFieldBegin(PUSH_FIELD_DESC);
      oprot.writeBool(this.push);
      oprot.writeFieldEnd();
    }
    if (this.scene != null) {
      if (isSetScene()) {
        oprot.writeFieldBegin(SCENE_FIELD_DESC);
        oprot.writeString(this.scene);
        oprot.writeFieldEnd();
      }
    }
    if (this.imageUrl != null) {
      if (isSetImageUrl()) {
        oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
        oprot.writeString(this.imageUrl);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Info(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("appId:");
    if (this.appId == null) {
      sb.append("null");
    } else {
      sb.append(this.appId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderId:");
    if (this.senderId == null) {
      sb.append("null");
    } else {
      sb.append(this.senderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiverId:");
    if (this.receiverId == null) {
      sb.append("null");
    } else {
      sb.append(this.receiverId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetUri()) {
      if (!first) sb.append(", ");
      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    if (isSetProcessMethod()) {
      if (!first) sb.append(", ");
      sb.append("processMethod:");
      sb.append(this.processMethod);
      first = false;
    }
    if (isSetProcessed()) {
      if (!first) sb.append(", ");
      sb.append("processed:");
      sb.append(this.processed);
      first = false;
    }
    if (isSetRead()) {
      if (!first) sb.append(", ");
      sb.append("read:");
      sb.append(this.read);
      first = false;
    }
    if (isSetImportance()) {
      if (!first) sb.append(", ");
      sb.append("importance:");
      sb.append(this.importance);
      first = false;
    }
    if (isSetBody()) {
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
    }
    if (isSetBodyHtml()) {
      if (!first) sb.append(", ");
      sb.append("bodyHtml:");
      if (this.bodyHtml == null) {
        sb.append("null");
      } else {
        sb.append(this.bodyHtml);
      }
      first = false;
    }
    if (isSetTitleHtml()) {
      if (!first) sb.append(", ");
      sb.append("titleHtml:");
      if (this.titleHtml == null) {
        sb.append("null");
      } else {
        sb.append(this.titleHtml);
      }
      first = false;
    }
    if (isSetObjectId()) {
      if (!first) sb.append(", ");
      sb.append("objectId:");
      if (this.objectId == null) {
        sb.append("null");
      } else {
        sb.append(this.objectId);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
    }
    if (isSetLastModified()) {
      if (!first) sb.append(", ");
      sb.append("lastModified:");
      sb.append(this.lastModified);
      first = false;
    }
    if (isSetGuid()) {
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
    }
    if (isSetAction()) {
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
    }
    if (isSetPush()) {
      if (!first) sb.append(", ");
      sb.append("push:");
      sb.append(this.push);
      first = false;
    }
    if (isSetScene()) {
      if (!first) sb.append(", ");
      sb.append("scene:");
      if (this.scene == null) {
        sb.append("null");
      } else {
        sb.append(this.scene);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetAppId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appId' is unset! Struct:" + toString());
    }

    if (!isSetSenderId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'senderId' is unset! Struct:" + toString());
    }

    if (!isSetReceiverId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'receiverId' is unset! Struct:" + toString());
    }

    if (!isSetType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

