#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Info:
  """
  Attributes:
   - id
   - appId
   - senderId
   - receiverId
   - type
   - uri
   - title
   - data
   - processMethod
   - processed
   - read
   - importance
   - body
   - bodyHtml
   - titleHtml
   - objectId
   - date
   - lastModified
   - guid
   - action
   - push
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'appId', None, None, ), # 2
    (3, TType.STRING, 'senderId', None, None, ), # 3
    (4, TType.STRING, 'receiverId', None, None, ), # 4
    (5, TType.STRING, 'type', None, None, ), # 5
    (6, TType.STRING, 'uri', None, None, ), # 6
    (7, TType.STRING, 'title', None, None, ), # 7
    (8, TType.STRING, 'data', None, None, ), # 8
    (9, TType.I32, 'processMethod', None, None, ), # 9
    (10, TType.BOOL, 'processed', None, None, ), # 10
    (11, TType.BOOL, 'read', None, None, ), # 11
    (12, TType.I32, 'importance', None, None, ), # 12
    (13, TType.STRING, 'body', None, None, ), # 13
    (14, TType.STRING, 'bodyHtml', None, None, ), # 14
    (15, TType.STRING, 'titleHtml', None, None, ), # 15
    (16, TType.STRING, 'objectId', None, None, ), # 16
    (17, TType.I64, 'date', None, None, ), # 17
    (18, TType.I64, 'lastModified', None, None, ), # 18
    (19, TType.STRING, 'guid', None, None, ), # 19
    (20, TType.STRING, 'action', None, None, ), # 20
    (21, TType.BOOL, 'push', None, None, ), # 21
  )

  def __init__(self, id=None, appId=None, senderId=None, receiverId=None, type=None, uri=None, title=None, data=None, processMethod=None, processed=None, read=None, importance=None, body=None, bodyHtml=None, titleHtml=None, objectId=None, date=None, lastModified=None, guid=None, action=None, push=None,):
    self.id = id
    self.appId = appId
    self.senderId = senderId
    self.receiverId = receiverId
    self.type = type
    self.uri = uri
    self.title = title
    self.data = data
    self.processMethod = processMethod
    self.processed = processed
    self.read = read
    self.importance = importance
    self.body = body
    self.bodyHtml = bodyHtml
    self.titleHtml = titleHtml
    self.objectId = objectId
    self.date = date
    self.lastModified = lastModified
    self.guid = guid
    self.action = action
    self.push = push

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.appId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.senderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.receiverId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.processMethod = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.processed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.read = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.importance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.body = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.bodyHtml = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.titleHtml = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.objectId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.lastModified = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.action = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.BOOL:
          self.push = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Info')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.appId is not None:
      oprot.writeFieldBegin('appId', TType.STRING, 2)
      oprot.writeString(self.appId)
      oprot.writeFieldEnd()
    if self.senderId is not None:
      oprot.writeFieldBegin('senderId', TType.STRING, 3)
      oprot.writeString(self.senderId)
      oprot.writeFieldEnd()
    if self.receiverId is not None:
      oprot.writeFieldBegin('receiverId', TType.STRING, 4)
      oprot.writeString(self.receiverId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 5)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.uri is not None:
      oprot.writeFieldBegin('uri', TType.STRING, 6)
      oprot.writeString(self.uri)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 7)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 8)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    if self.processMethod is not None:
      oprot.writeFieldBegin('processMethod', TType.I32, 9)
      oprot.writeI32(self.processMethod)
      oprot.writeFieldEnd()
    if self.processed is not None:
      oprot.writeFieldBegin('processed', TType.BOOL, 10)
      oprot.writeBool(self.processed)
      oprot.writeFieldEnd()
    if self.read is not None:
      oprot.writeFieldBegin('read', TType.BOOL, 11)
      oprot.writeBool(self.read)
      oprot.writeFieldEnd()
    if self.importance is not None:
      oprot.writeFieldBegin('importance', TType.I32, 12)
      oprot.writeI32(self.importance)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.STRING, 13)
      oprot.writeString(self.body)
      oprot.writeFieldEnd()
    if self.bodyHtml is not None:
      oprot.writeFieldBegin('bodyHtml', TType.STRING, 14)
      oprot.writeString(self.bodyHtml)
      oprot.writeFieldEnd()
    if self.titleHtml is not None:
      oprot.writeFieldBegin('titleHtml', TType.STRING, 15)
      oprot.writeString(self.titleHtml)
      oprot.writeFieldEnd()
    if self.objectId is not None:
      oprot.writeFieldBegin('objectId', TType.STRING, 16)
      oprot.writeString(self.objectId)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 17)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.lastModified is not None:
      oprot.writeFieldBegin('lastModified', TType.I64, 18)
      oprot.writeI64(self.lastModified)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 19)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.STRING, 20)
      oprot.writeString(self.action)
      oprot.writeFieldEnd()
    if self.push is not None:
      oprot.writeFieldBegin('push', TType.BOOL, 21)
      oprot.writeBool(self.push)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appId is None:
      raise TProtocol.TProtocolException(message='Required field appId is unset!')
    if self.senderId is None:
      raise TProtocol.TProtocolException(message='Required field senderId is unset!')
    if self.receiverId is None:
      raise TProtocol.TProtocolException(message='Required field receiverId is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StateResult:
  """
  Attributes:
   - mid
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mid', None, None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, mid=None, status=None,):
    self.mid = mid
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StateResult')
    if self.mid is not None:
      oprot.writeFieldBegin('mid', TType.STRING, 1)
      oprot.writeString(self.mid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
