#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import INotificationsThriftService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  StateResult sendInf(Info info)'
  print '  StateResult batchSendInf( infos)'
  print '  StateResult markProcessed(string mid)'
  print '  StateResult markRead(string mid)'
  print '   queryInfo(string appId, string type, string receiverId, string objectId)'
  print '  StateResult replaceInf(Info info)'
  print '  StateResult batchReplaceInf( infos)'
  print '   listAll(string receiverId, string status, i64 from, i32 size)'
  print '   listAllOfApp(string appId, string receiverId, string status, i64 from, i32 size)'
  print '   listById(string receiverId, string status, i64 mid, i32 count)'
  print '   listOfAppById(string appId, string receiverId, string status, i64 mid, i32 count)'
  print '   listByTime(string receiverId, string status, i64 from, i32 count)'
  print '   listOfAppByTime(string appId, string receiverId, string status, i64 from, i32 count)'
  print '   top(string receiverId, string status, i32 topn)'
  print '   topOfApp(string appId, string receiverId, string status, i32 topn)'
  print '  i32 count(string receiverId, string status)'
  print '  i32 countOfApp(string appId, string receiverId, string status)'
  print '  string send(string message)'
  print '  string batchSend(string messages)'
  print '  string process(string mid)'
  print '  string query(string appId, string type, string receiverId, string objectId)'
  print '  string replace(string message)'
  print '  string batchReplace(string messages)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = INotificationsThriftService.Client(protocol)
transport.open()

if cmd == 'sendInf':
  if len(args) != 1:
    print 'sendInf requires 1 args'
    sys.exit(1)
  pp.pprint(client.sendInf(eval(args[0]),))

elif cmd == 'batchSendInf':
  if len(args) != 1:
    print 'batchSendInf requires 1 args'
    sys.exit(1)
  pp.pprint(client.batchSendInf(eval(args[0]),))

elif cmd == 'markProcessed':
  if len(args) != 1:
    print 'markProcessed requires 1 args'
    sys.exit(1)
  pp.pprint(client.markProcessed(args[0],))

elif cmd == 'markRead':
  if len(args) != 1:
    print 'markRead requires 1 args'
    sys.exit(1)
  pp.pprint(client.markRead(args[0],))

elif cmd == 'queryInfo':
  if len(args) != 4:
    print 'queryInfo requires 4 args'
    sys.exit(1)
  pp.pprint(client.queryInfo(args[0],args[1],args[2],args[3],))

elif cmd == 'replaceInf':
  if len(args) != 1:
    print 'replaceInf requires 1 args'
    sys.exit(1)
  pp.pprint(client.replaceInf(eval(args[0]),))

elif cmd == 'batchReplaceInf':
  if len(args) != 1:
    print 'batchReplaceInf requires 1 args'
    sys.exit(1)
  pp.pprint(client.batchReplaceInf(eval(args[0]),))

elif cmd == 'listAll':
  if len(args) != 4:
    print 'listAll requires 4 args'
    sys.exit(1)
  pp.pprint(client.listAll(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'listAllOfApp':
  if len(args) != 5:
    print 'listAllOfApp requires 5 args'
    sys.exit(1)
  pp.pprint(client.listAllOfApp(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'listById':
  if len(args) != 4:
    print 'listById requires 4 args'
    sys.exit(1)
  pp.pprint(client.listById(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'listOfAppById':
  if len(args) != 5:
    print 'listOfAppById requires 5 args'
    sys.exit(1)
  pp.pprint(client.listOfAppById(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'listByTime':
  if len(args) != 4:
    print 'listByTime requires 4 args'
    sys.exit(1)
  pp.pprint(client.listByTime(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'listOfAppByTime':
  if len(args) != 5:
    print 'listOfAppByTime requires 5 args'
    sys.exit(1)
  pp.pprint(client.listOfAppByTime(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'top':
  if len(args) != 3:
    print 'top requires 3 args'
    sys.exit(1)
  pp.pprint(client.top(args[0],args[1],eval(args[2]),))

elif cmd == 'topOfApp':
  if len(args) != 4:
    print 'topOfApp requires 4 args'
    sys.exit(1)
  pp.pprint(client.topOfApp(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'count':
  if len(args) != 2:
    print 'count requires 2 args'
    sys.exit(1)
  pp.pprint(client.count(args[0],args[1],))

elif cmd == 'countOfApp':
  if len(args) != 3:
    print 'countOfApp requires 3 args'
    sys.exit(1)
  pp.pprint(client.countOfApp(args[0],args[1],args[2],))

elif cmd == 'send':
  if len(args) != 1:
    print 'send requires 1 args'
    sys.exit(1)
  pp.pprint(client.send(args[0],))

elif cmd == 'batchSend':
  if len(args) != 1:
    print 'batchSend requires 1 args'
    sys.exit(1)
  pp.pprint(client.batchSend(args[0],))

elif cmd == 'process':
  if len(args) != 1:
    print 'process requires 1 args'
    sys.exit(1)
  pp.pprint(client.process(args[0],))

elif cmd == 'query':
  if len(args) != 4:
    print 'query requires 4 args'
    sys.exit(1)
  pp.pprint(client.query(args[0],args[1],args[2],args[3],))

elif cmd == 'replace':
  if len(args) != 1:
    print 'replace requires 1 args'
    sys.exit(1)
  pp.pprint(client.replace(args[0],))

elif cmd == 'batchReplace':
  if len(args) != 1:
    print 'batchReplace requires 1 args'
    sys.exit(1)
  pp.pprint(client.batchReplace(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
